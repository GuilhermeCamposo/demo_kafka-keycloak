- name: Evaluate Streams Subscription
  kubernetes.core.k8s:
    state: present
    kind: Subscription
    api_version: operators.coreos.com/v1alpha1
    definition:
      metadata:
        name: amq-streams
        namespace: '{{ demo_project }}'
      spec:
        channel: stable
        installPlanApproval: Automatic
        name: amq-streams
        source: redhat-operators
        sourceNamespace: openshift-marketplace

- name: Wait for AMQ Streams operator to be running
  kubernetes.core.k8s_info:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: false
    api_version: v1
    kind: Pod
    namespace: '{{ demo_project }}'
    label_selectors:
      - rht.comp=AMQ_Streams
      - rht.subcomp=cluster-operator
    field_selectors:
      - status.phase=Running
  register: r_streams_pod
  retries: 10
  delay: 10
  until: r_streams_pod.resources | list | length == 1

- name: Get SSO certificate
  ansible.builtin.shell: |
     set -o pipefail && echo "Q" | openssl s_client -showcerts -connect {{ sso_host }}:443 2>/dev/null \
     | awk '/BEGIN CERTIFICATE/,/END CERTIFICATE/ { print $0 } ' > {{ output_dir }}/sso.crt
  retries: 20
  delay: 15
  register: my_output
  changed_when: my_output.rc != 0
  args:
    executable: /bin/bash

- name: Check store secret
  kubernetes.core.k8s:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: '{{ verify_tls }}'
    state: absent
    kind: Secret
    name: "oauth-server-cert"
    namespace: '{{ demo_project }}'
    api_version: v1

- name: Create SSO secret for Kafka
  ansible.builtin.shell: oc create secret generic oauth-server-cert --from-file={{ output_dir }}/sso.crt -n {{ demo_project }}
  args:
    executable: /bin/bash
  retries: 20
  delay: 15
  register: my_output
  changed_when: my_output.rc != 0

- name: Evaluate Streams Instance
  kubernetes.core.k8s:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: false
    state: present
    resource_definition: "{{ lookup('template', 'kafka.yaml.j2') }}"

- name: Wait for AMQ Streams cluster to be running
  kubernetes.core.k8s_info:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: false
    api_version: v1
    kind: Pod
    namespace: '{{ demo_project }}'
    name: my-cluster-kafka-2
    field_selectors:
      - status.phase=Running
  register: r_streams_pod
  retries: 10
  delay: 10
  until: r_streams_pod.resources | list | length == 1

- name: Evaluate Keycloak Client Secret
  kubernetes.core.k8s:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: false
    state: present
    namespace: '{{ demo_project }}'
    resource_definition: "{{ lookup('file', 'sso-client-secret.yml') }}"

- name: Evaluate Kafka Bridge
  kubernetes.core.k8s:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: false
    state: present
    namespace: '{{ demo_project }}'
    resource_definition: "{{ lookup('template', 'bridge.yml.j2') }}"