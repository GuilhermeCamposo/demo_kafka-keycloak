- name: Evaluate SSO Subscription
  kubernetes.core.k8s:
    state: present
    kind: Subscription
    api_version: operators.coreos.com/v1alpha1
    definition:
      metadata:
        name: rhsso-operator
        namespace: '{{ demo_project }}'
      spec:
        channel: stable
        installPlanApproval: Automatic
        name: rhsso-operator
        source: redhat-operators
        sourceNamespace: openshift-marketplace

- name: Wait for SSO operator to install
  kubernetes.core.k8s_info:
    validate_certs: '{{ verify_tls }}'
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: keycloaks.keycloak.org
  register: crd_sso
  until: crd_sso.resources | list | length == 1
  retries: 10
  delay: 30

- name: Evaluate SSO Instance
  kubernetes.core.k8s:
    state: present
    kind: Keycloak
    api_version: keycloak.org/v1alpha1
    definition:
      metadata:
        name: example-keycloak
        namespace: '{{ demo_project }}'
      spec:
        externalAccess:
          enabled: true
        instances: 1

- name: Wait for SSO to be running
  ansible.builtin.uri:
    url: https://keycloak-{{ demo_project }}.{{ route_subdomain }}
    status_code: '200'
  register: result
  until: result.status == 200
  retries: 90
  delay: 30

- name: Get SSO secret
  kubernetes.core.k8s_info:
    kind: Secret
    name: credential-example-keycloak
    namespace: '{{ demo_project }}'
    api_version: v1
  register: r_credential
  until:
    - r_credential.resources is defined
    - r_credential.resources[0] is defined
  retries: 10
  delay: 15

- name: Set admin password
  ansible.builtin.set_fact:
    rhsso_admin_password: '{{ r_credential.resources[0].data.ADMIN_PASSWORD | b64decode }}'
    rhsso_admin_username: '{{ r_credential.resources[0].data.ADMIN_USERNAME | b64decode }}'

- name: Set SSO host
  ansible.builtin.set_fact:
    sso_host: 'keycloak-{{ demo_project }}.{{ route_subdomain }}'

- name: Get SSO admin token
  ansible.builtin.uri:
    url: 'https://{{ sso_host }}/auth/realms/master/protocol/openid-connect/token'
    validate_certs: false
    method: POST
    body:
      username: "{{ rhsso_admin_username }}"
      password: "{{ rhsso_admin_password }}"
      grant_type: "password"
      client_id: "admin-cli"
    body_format: form-urlencoded
    status_code: 200,201,204
  register: rhsso_admin_token
  retries: 10
  delay: 10
  until: rhsso_admin_token.status in [200, 201, 204]

- name: Create Authz Realm
  ansible.builtin.uri:
    url: 'https://{{ sso_host }}/auth/admin/realms'
    method: POST
    body_format: json
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ rhsso_admin_token.json.access_token }}"
    body: "{{ lookup('file', 'kafka-authz-realm.json') }}"
    return_content: true
    validate_certs: false
    status_code: 201
