%dev.quarkus.http.port=8081

# Go bad to the first records, if it's out first access
kafka.auto.offset.reset=earliest

# Set the Kafka topic, as it's not the channel name
mp.messaging.incoming.requests.topic=a_quote_requests
mp.messaging.incoming.requests.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.requests.group.id=a_request_group


# Configure the outgoing `quotes` Kafka topic
mp.messaging.outgoing.quotes.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.quotes.topic=a_quotes

kafka.bootstrap.servers=my-cluster-kafka-bootstrap:9093
mp.messaging.connector.smallrye-kafka.ssl.truststore.location=/tmp/truststore.p12
mp.messaging.connector.smallrye-kafka.ssl.truststore.password=storepass
mp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL
mp.messaging.connector.smallrye-kafka.sasl.mechanism=OAUTHBEARER
mp.messaging.connector.smallrye-kafka.sasl.jaas.config=${JAASCONFIG}
mp.messaging.connector.smallrye-kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

quarkus.ssl.native=true
quarkus.kubernetes-client.trust-certs=true

quarkus.openshift.secret-volumes.certs-secret.secret-name=client-truststore
quarkus.openshift.mounts.certs-secret.path=/tmp/truststore.p12
quarkus.openshift.mounts.certs-secret.sub-path=truststore.p12
quarkus.openshift.env.vars.ab-jolokia-off=true
quarkus.openshift.env.configmaps=jaas-config

# logging.level.org.apache.kafka=TRACE
# logging.level.io.strimzi=TRACE
